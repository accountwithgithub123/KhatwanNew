package com.example.khatwan;

import static android.app.Activity.RESULT_OK;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;
import androidx.loader.content.CursorLoader;

import android.provider.MediaStore;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.Toast;

import com.bumptech.glide.Glide;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.android.material.button.MaterialButton;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.OnProgressListener;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;
import com.iceteck.silicompressorr.SiliCompressor;

import java.io.File;
import java.util.Date;
import java.util.Objects;

public class HomeFragment extends Fragment {
    Uri videoUri;
    AppCompatButton upload_post_btn;
    MaterialButton post_video_layout;
    EditText video_description;
    ImageView post_video_img;
    StorageReference storageReference;
    DatabaseReference reference;
    FirebaseAuth auth;
    FirebaseUser user;
    ProgressBar progressBar;


    public HomeFragment() {
        // Required empty public constructor
    }
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view=inflater.inflate(R.layout.fragment_home, container, false);



        //firebse
        reference= FirebaseDatabase.getInstance().getReference().child("VideosPosts");
        storageReference= FirebaseStorage.getInstance().getReference();
        auth=FirebaseAuth.getInstance();
        user=auth.getCurrentUser();

        //ids initialization
        post_video_layout=view.findViewById(R.id.post_video_layout);
        upload_post_btn=view.findViewById(R.id.upload_video_post_btn);
        video_description=view.findViewById(R.id.post_video_description);
        post_video_img= view.findViewById(R.id.post_video_img);
        progressBar=view.findViewById(R.id.progress_bar);

        //pick images from Gallery
        post_video_layout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
                intent.setType("video/*");
                startActivityForResult(intent, 2);

            }
        });

        // to upload post
        upload_post_btn.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View view) {
                Log.e("TAG", "onClick: In ON Click of UploadBtn" );
                if (videoUri!=null)
                {
                    File file= new File(requireContext().getCacheDir().getAbsolutePath());
                    Log.e("VideoURI : ", videoUri.toString() + "\nFile.getPath() : " + file.getPath() );
                    new VideoCompression(requireContext(), videoUri.toString(), file.getPath()).execute();
                    //new VideoCompression(requireContext()).execute(videoUri.toString(),null,file.getPath());
                }
                else
                {
                    uploadPostWithoutVideo();
                }
            }


        });
        return view;

    }



    @Override
    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode==2 && resultCode==RESULT_OK && data!=null)
        {
            videoUri= data.getData();
            Glide.with(requireContext()).load(videoUri).into(post_video_img);
            // post_image.setImageURI(imageUri);
        }
    }

    private void uploadVideoWithoutText(Uri viduri)
    {
        StorageReference fileRef= storageReference.child("Videos/"+System.currentTimeMillis()+".mp4");

        fileRef.putFile(viduri).addOnCompleteListener(new OnCompleteListener<UploadTask.TaskSnapshot>() {
            @Override
            public void onComplete(@NonNull Task<UploadTask.TaskSnapshot> task) {

                if (task.isSuccessful())
                {
                    fileRef.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {
                        @Override
                        public void onSuccess(Uri uri) {

                            String uid=user.getUid();
                            //to get UserName from Database
                            DatabaseReference userRef= FirebaseDatabase.getInstance().getReference().child("Users").child(uid);

                            userRef.addListenerForSingleValueEvent(new ValueEventListener() {
                                @Override
                                public void onDataChange(@NonNull DataSnapshot snapshot) {
                                    String Uname="";
                                    String profileImageUrl="";
                                    String imgUrl= uri.toString();
                                    String post_desc= video_description.getText().toString();
                                    Date date= new Date();
                                    String dateFormat= String.valueOf(date.getTime());
                                    if (snapshot.exists()) {
                                        Uname = snapshot.child("username").getValue(String.class);
                                        profileImageUrl = snapshot.child("userprofileimage").getValue(String.class);
                                    }
                                    VideoPostData videoPostData;
                                    if (viduri==null)
                                    {
                                        Log.e("TAG", "onComplete: Without Video");
                                         videoPostData= new VideoPostData(post_desc,"",dateFormat,uid,Uname,profileImageUrl);
                                    }
                                    else{
                                        videoPostData= new VideoPostData(post_desc,imgUrl,dateFormat,uid,Uname,profileImageUrl);
                                        Log.e("TAG", "onComplete: Video!");
                                    }
                                    //upload data in realtime database
                                    reference.push().setValue(videoPostData).addOnCompleteListener(new OnCompleteListener<Void>() {
                                        @Override
                                        public void onComplete(@NonNull Task<Void> task) {
                                            if (task.isSuccessful())
                                            {
                                                Log.e("TAG", "onComplete: Pushed Successfully!");
                                                Toast.makeText(requireContext(), " Pushed Successfully!", Toast.LENGTH_SHORT).show();
                                                //FragmentManager manager= requireActivity().getSupportFragmentManager();
                                                //FragmentTransaction transaction=manager.beginTransaction();
                                                //transaction.replace(R.id.framelayout,new VideosFragment());
                                                //transaction.commit();

                                            }
                                        }
                                    }).addOnFailureListener(new OnFailureListener() {
                                        @Override
                                        public void onFailure(@NonNull Exception e) {
                                            Toast.makeText(requireContext(), "Error "+e.getMessage(), Toast.LENGTH_SHORT).show();
                                        }
                                    });
                                }

                                @Override
                                public void onCancelled(@NonNull DatabaseError error) {

                                }
                            });




                        }
                    }).addOnFailureListener(new OnFailureListener() {
                        @Override
                        public void onFailure(@NonNull Exception e) {
                            Toast.makeText(requireContext(), "Error "+ e.getMessage(), Toast.LENGTH_SHORT).show();
                        }
                    });

                }

            }
        }).addOnProgressListener(new OnProgressListener<UploadTask.TaskSnapshot>() {
            @Override
            public void onProgress(@NonNull UploadTask.TaskSnapshot snapshot) {
                progressBar.setVisibility(View.VISIBLE);
            }
        }).addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(@NonNull Exception e) {
                Toast.makeText(requireContext(), "Error "+e.getMessage(), Toast.LENGTH_SHORT).show();
            }
        });
    }

    private void uploadPostWithoutVideo()
    {
        String uid=user.getUid();
        //to get UserName from Database
        DatabaseReference userRef= FirebaseDatabase.getInstance().getReference().child("Users").child(uid);

        userRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String Uname="";
                String profileImageUrl="";
                String post_desc= video_description.getText().toString();
                Date date= new Date();
                String dateFormat= String.valueOf(date.getTime());
                if (snapshot.exists()) {
                    Uname = snapshot.child("username").getValue(String.class);
                }

                VideoPostData videoPostData= new VideoPostData(post_desc,"",uid,dateFormat,Uname,profileImageUrl);
                //upload data in realtime database
                reference.push().setValue(videoPostData).addOnCompleteListener(new OnCompleteListener<Void>() {
                    @Override
                    public void onComplete(@NonNull Task<Void> task) {
                        if (task.isSuccessful())
                        {
                            Log.e("TAG", "onComplete: Video Pushed Successfully!");
                            Toast.makeText(requireContext(), "Video Pushed Successfully!", Toast.LENGTH_SHORT).show();
                            /*
                            FragmentManager manager= getActivity().getSupportFragmentManager();
                            FragmentTransaction transaction=manager.beginTransaction();
                            transaction.replace(R.id.framelayout,new DisplayPostFragment());
                            transaction.commit();
                             */

                        }
                    }
                }).addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        Toast.makeText(requireContext(), "Error "+e.getMessage(), Toast.LENGTH_SHORT).show();
                    }
                });
            }


            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
    }

    @SuppressLint("StaticFieldLeak")
    public class VideoCompression extends AsyncTask<Void, Void, String> {
        Context context;
        String input;
        String output;

        public VideoCompression(Context context, String input, String output) {
            this.context = context;
            this.input = input;
            this.output = output;
        }

        @Override
        protected String doInBackground(Void... voids) {
            String filePath = null;

            // Log input and output paths
            Log.d("VideoCompression", "Input path: " + input);
            Log.d("VideoCompression", "Output path: " + output);

            // Check if the input file exists
            File inputFile = new File(input);
            if (!inputFile.exists()) {
                Log.e("VideoCompression", "Input file does not exist: " + input);
                return null;
            }

            try {
                filePath = SiliCompressor.with(context).compressVideo(input, output);
            } catch (IllegalArgumentException e) {
                Log.e("VideoCompression", "Invalid argument: " + e.getMessage());
            } catch (Exception e) {
                Log.e("VideoCompression", "Compression error: " + e.getMessage());
            }
            return filePath;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            if (s != null && !s.isEmpty()) {
                File f = new File(s);
                Uri uri = Uri.fromFile(f);
                uploadVideoWithoutText(uri);
            } else {
                Log.e("VideoCompression", "Compression failed or output file path is empty");
            }
        }
    }

}